@import '../scss/vars';

// map functions
@function breakpoint($breakpoint) {
  @if map-has-key($grid-breakpoints, $breakpoint) {
    @return map-get($grid-breakpoints, $breakpoint);
  } @else {
    @warn 'breakpoint: could not find #{$breakpoint} in $grid-breakpoints map. Please make sure it is defined';
  }
}

@function gutter($breakpoint) {
  @if map-has-key($gutter-breakpoints, $breakpoint) {
    @return map-get($gutter-breakpoints, $breakpoint);
  } @else {
    @warn 'gutter: could not find #{$breakpoint} in $gutter-breakpoints map. Please make sure it is defined';
  }
}

@function grid-gutter($breakpoint) {
  @if map-has-key($grid-gutter-breakpoints, $breakpoint) {
    @return map-get($grid-gutter-breakpoints, $breakpoint);
  } @else {
    @warn 'grid-gutter: could not find #{$breakpoint} in $grid-breakpoints map. Please make sure it is defined';
  }
}

$max-width: 1600px;
$maxwidth-text: 680px;
$columns: 12;

$grid-breakpoints: (xs: 375px, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1600px);
$gutter-breakpoints: (xs: 5px, sm: 10px);
$grid-gutter-breakpoints: (xs: 2rem, sm: 3rem);

// .grid {
//     padding-left: 2rem!important;
//     padding-right: 2rem!important;

  // margin-left: grid-gutter('xs');
  // margin-right: grid-gutter('xs');
  // padding-left: gutter('xs');
  // padding-right: gutter('xs');

  // @media (min-width: breakpoint('md')) {
  //   padding-left: 6rem!important;
  //   padding-right: 6rem!important;
  //   // margin-left: grid-gutter('sm');
  //   // margin-right: grid-gutter('sm');
  //   // padding-left: gutter('sm');
  //   // padding-right: gutter('sm');
  // }

  // &.max {
  //   max-width: $max-width;
  // }
// }


// .row {
//   display: flex;
//   justify-content: center;
//   flex-wrap: wrap;
//   max-width: 1140px;
//   width: 100%;
//   padding-left: 1.25rem;
//   padding-right: 1.25rem;
//
//   @media (min-width: breakpoint('sm')) {
//     margin: 0;
//   }
// }

.grid {
  position: relative;
  display: flex;
  justify-content: center;
  width: 100%;
  padding: 0;
  .row {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    max-width: 1140px;
    width: 100%;
    padding-left: 1.25rem;
    padding-right: 1.25rem;
    &.flex-start {
      justify-content: flex-start;
    }
    &.column {
      flex-direction: column;
    }
  }
}

.grid-fullwidth {
  position: relative;
  display: flex;
  justify-content: center;
  width: 100%;
  padding: 0;
  .row {
    max-width: none;
    width: 100%;
    padding-left: 0;
    padding-right: 0;
  }
  &.flex-start {
    justify-content: flex-start;
  }
}


[class*='#{$prefix}--col'] {
  position: relative;
  width: 100%;
  min-height: 1px;
  padding: 0;

  @media (min-width: breakpoint('sm')) {
    padding: 0;
  }
}

@for $i from 1 through $columns {
  .ly--col-xs-#{$i} {
    flex-basis: (100% * $i / $columns);
  }
}

@each $breakpoint in map-keys($grid-breakpoints) {
  @media (min-width: breakpoint($breakpoint)) {
    .ly--col-#{$breakpoint}-auto {
      flex: 0 0 auto;
      width: auto;
    }

    @for $i from 1 through $columns {
      .ly--col-#{$breakpoint}-#{$i} {
        flex-basis: (100% * $i / $columns);
      }
    }
  }
}

// deprecated
$gutter-size: 10px;

@mixin column-size($col-num) {
  flex-basis: (100% * $col-num / $columns);
  max-width: (100% * $col-num / $columns);
}

.col-xs,
.col-sm,
.col-md,
.col-lg {
  flex-basis: 0;
  flex: 1;
  flex-grow: 1;
  max-width: 100%;
}
.row-content {
  max-width: $maxwidth-text;
}

.col-content {
  max-width: $maxwidth-text;
}
